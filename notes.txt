https://www.youtube.com/watch?v=4r6WdaY3SOA&list=PLZlA0Gpn_vH8jbFkBjOuFjhxANC63OmXM&index=2

  // in one terminal run this
  //  mongod --dbpath ~/data/db
  //  can then run in GUI mongoDB Compass or, have mongosh running in second terminal
___________________________________________________________________________________________

2. How the backend works

The backend is everything that happens behind the scenes—it’s not visible to users, but it powers the entire application.

Step 1: Receiving a Request
When a client (like a web browser) makes a request, it sends a URL to the server. This URL contains almost all the information the server needs to process the request.

https://example.com/path?query=value

• https: (Protocol) – Defines whether the request is encrypted.
  • HTTP (not encrypted)
  • HTTPS (encrypted for security)
• example.com (Host) – The domain name that tells the internet which server to contact.
• /path (Path) – Specifies which section of code the server should execute to generate a response.
• ?query=value (Query String) – Provides extra details that alter the response.
  • Example: YouTube uses the same /search path for all searches, but the query string (?q=video_name) tells the server what to look for.

Step 2: Processing the Request
Once the server receives the request, it needs to determine what action to perform. This is defined by an HTTP method, such as:

• GET – Retrieve data
• POST – Send new data
• PUT – Update existing data
• DELETE – Remove data

The server combines the path, query string, and HTTP method to determine:

1. Which section of code to execute
2. What data (if any) is needed to generate a response

Step 3: Generating a Response
Once the server processes the request, it typically responds with one of the following:

• HTML – A webpage, dynamically generated based on the request
• JSON – Data that a frontend app can use
• Error Messages – If something goes wrong

Step 4: Security & Data Storage
A server acts as a barrier between the public internet and private data.

• Only defined paths are accessible – Secure information, like databases, is hidden.
• Authentication & authorization – Some paths may require users to log in.
• Encryption (HTTPS) – Prevents attackers from reading intercepted data.

___________________________________________________________________________________________

3. What is REST?
Most modern websites use REST (Representational State Transfer) as a standard way for clients (browsers, mobile apps, etc.) to communicate with servers.

At its core, REST follows the CRUD (Create, Read, Update, Delete) model for managing resources.

REST in Action
Imagine a web service that manages users. The server exposes a resource at:

https://example.com/users

RESTful APIs use HTTP methods to define different actions on this resource:

Action	            Method	          URL	            Description
Read all users      GET	            /users	    Retrieves a list of users
Create a user	      POST	          /users	    Adds a new user
Read one user	      GET	            /users/1	  Retrieves a user with ID 1
Update a user	      PUT	            /users/1	  Updates user 1
Delete a user	      DELETE	        /users/1	  Removes user 1

Key REST Principles
Resource-based URLs – The URL represents what you’re acting on (e.g., /users for users).
Stateless – Each request is independent; the server doesn’t remember previous requests.
Consistent HTTP Methods – Actions are defined using standard HTTP verbs.
Scalability & Simplicity – RESTful APIs are easy to understand and scale.

___________________________________________________________________________________________

4. MVC: A Pattern to Organize Code
MVC (Model-View-Controller) is a design pattern used to organize code and make it less complex by breaking it into three distinct sections, each with its own responsibility.

How MVC Works
When a user interacts with a website (e.g., searching for cats), their request is processed through three layers:

1. Controller – Handles Requests

• The controller is the entry point for the request.
• It determines what needs to happen and coordinates the flow between the model (data) and view (presentation).
• Example: The controller receives a request to search for cats.

2. Model – Handles Data

• The model interacts with the database and performs data-related logic.
• The controller asks the model to fetch or update data, but never interacts with the database directly.
• Example: The controller asks the model to retrieve a list of all cats.

3. View – Handles Presentation

• The view is responsible for displaying the data.
• It takes data from the controller and dynamically generates HTML for the user.
• Example: Once the model returns a list of cats, the controller sends it to the view, which renders it into HTML.

4. Controller Sends Response

• The controller takes the rendered HTML from the view and sends it back to the user’s browser.

Key MVC Rules
✅ Separation of concerns – Each component has a single responsibility:

• Model → Handles data
• View → Displays data
• Controller → Manages the flow
  ✅ No direct interaction between model and view – The controller acts as the middleman.
  ✅ Easier to maintain and scale – Changes to one part of the code don’t affect the others.

Example: Searching for Cats
• User searches for "cats" → Request goes to the controller.
• Controller asks the model for cat data.
• Model queries the database and returns a list of cats.
• Controller sends the list to the view.
• View renders the list into HTML.
• Controller sends the HTML back to the user's browser.

What Happens on an Error?
• If the model fails (e.g., "No cats found"), it sends an error to the controller.
• The controller tells the view to display an error message.
• The view generates an HTML error page, and the controller sends it to the user.

Why Use MVC?
✅ Keeps code organized – No messy, mixed logic.
✅ Scales easily – Great for large applications.
✅ Improves collaboration – Teams can work on different parts independently.

MVC is a fundamental pattern used in frameworks like Express.js, Laravel, Django, Rails, and more!

___________________________________________________________________________________________

5. Project setup - Node, Express, MongoDB

1. npm init -y
2. in package.json change index.js to server.js (prefernce not really necessary)
3. install dependencies 
     npm i express ejs express-ejs-layouts
     npm i -D nodemon
4. back in package.json update the scripts
5. create server.js file

---------
app.set('layout', 'layouts/layout');
commonly used when working with templating engines like EJS, Pug, or Handlebars that support layout files.

What Does It Do?
• This sets a default layout file that will be used for rendering views.
• The layout file acts as a template that wraps around the actual content of each page.
• It allows you to maintain a consistent structure (like headers, footers, and sidebars) across multiple pages.

/views
  /layouts
    layout.ejs   <-- This is the main layout template
  index.ejs      <-- This is the actual page content

How It Works
• When you call res.render('index'), Express will:
• Look for index.ejs inside /views
• Wrap it inside layouts/layout.ejs
• The layout.ejs file should have a placeholder (<%- body %>) where the page content will be inserted.

Why Use This?
✅ Keeps code DRY – No need to repeat headers/footers in every file.
✅ Easier maintenance – Update the layout once, and it applies to all pages.
✅ Better structure – Views stay clean and focused only on content.
---------

// this is enough to get our server up and running, will see cannot GET / on localhost:3000 at this point
const express = require('express');
const app = express();
const expressLayouts = require('express-ejs-layouts');

app.set('view engine', 'ejs');
app.set('views', __dirname + '/views');
app.set('layout', 'layouts/layout');
app.use(expressLayouts);
app.use(express.static('public'));
app.listen(process.env.PORT || '3000');

---------

Now turning to routes, you may see many people put all the routes into server.js file but for a larger application it becomes hard to manage so we will use MVC to layout or application. So we will put all of our routes, which could also be called controllers, into a routes folder. 

We use routes instead of controllers because inside of node and express most people refer to controllers as routes but they are the same thing.

will then create a models folder so our MVC is now set up. 

first route will be index route everything when we don't have a resource or a model in our URL.

We will start with index.js in routes to create the routes for our index of the application. 

once the route is complete for this and is hooked up to the server (ie export/import)
const indexRouter = require('./routes/index');
app.use('/', indexRouter);

we can now integrate our routes with our views. 

in views > layouts > layout.ejs
note: in vs code if you type ! and enter you will get a base skeleton for html file. in the layouts file, we will create the header and footer and use <%- body %> to insert the rest of the content into the page. 

once this is done, you can create views that have text that would be "body" text. In our case we will use dummy text. Then we are going back into the route file to put the two together. 

router.get('/', (req, res) => {
  // because we did this app.set('views', __dirname + '/views'); in server.js it knows to look in the /views folder and it simply will grab index.
  res.render('index');
});

by hooking it up with a layout file, it will make maintaining easier as if there are changes to the layout we only have to do it in one file. 

--------
Mongoose for MongoDB

Finally we need to work on getting our model integrated. We will hook up to a local mongodb database

// in one terminal run this
 mongod --dbpath ~/data/db

 can then run in GUI mongoDB Compass or, have mongosh running in second terminal

 will install mongoose to run with mongoDB

 npm i mongoose

 then in server.js we will add the code for connecting to mongoose. 
 --------

DotENV

npm i -D dotenv

then create a .env file to use for variables.

once created import them into the server.js file 

--------

Git

Time to add in git, create a gitignore file and make sure .env is in there

---------

MongoDB Atlas

create a new prtoject and then create a cluster

eriknuber - EXyuwRXUyPazoxHg

connection string
mongodb+srv://eriknuber:EXyuwRXUyPazoxHg@cluster0.qn0x6.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

-------

How I made it live 

used render.com to do a free hosting. Connected via render to github and chose the correct public repo. 

then used MongoDB to create a cluster which will act as the DB. and, used the connection string inside of render.com for the environment variable DATABASE_URL

inside render 
build command: npm install
start command: node server.js

https://mybrary-app-mblt.onrender.com/

----------

6. Author's Index/Create/New routes

Add functionality to create, search and view authors in our app. 

each one of our routes should have views inside their own folders. So we created an authors folder and added in an index and new page. 

in the routes > authors labeled each route for what it will do.

this is how MVC works with routes/controllers having one file and then all the views are stored in a folder associated with the given route/controller. 

once boilerplate is done, need to go back to server.js file and add in the new route. 

when doing app.use('/authors', authorRouter); this means our routes inside the controller will be based off of authors/ and authors/new. So even though in the routes we have just '/' it is still being set up so that authors comes first. 

---------------

create header so we can navigate around

will create a partials folder, this will hold small snippets of code that aren't apart of our routes. This will be where all of our template files that aren't related to routes they are just partials we include in our other files. 

the reason to use these partials is it allows you to break out your ejs files into smaller files, and it allows you to import the files multiple times in other files so you don't have to duplicate code. 

With the header.ejs file built, go back into the layout.ejs file and include it.
<%- include('../partials/header.ejs') %>

---------------

create model for the authors

model folder create author.js

usually it is the singular form of whatever the controller/route is called. 

here we will import mongoose and then create a schema to grab all of the authors. once it's exported with the name of the table and the schema it can be used in other parts of the code. 

we will go back to the routes for author and require it and place it in the new Author route. 

next go to the new.ejs authors view and start creating the view for the page which includes a title and form. The form will be of method POST as we are creating a new author so have to submit materials via POST in order to add the author.

because we will be reusing form inputs in the new author and edit author sections, we will create them in partials. 

the equal sign tells the server to create whatever text you got inside and output it as html
<input type="text" name="name" value="<%= author ? author.name : '' %>" />

Uses the Correct EJS Syntax (<%= %>)
<%= %> is used for outputting values inside HTML.
<% %> is for logic without rendering output.
<%- %> when you want to render raw HTML inside your template.

<%- include('_form_fields') %>
✅ This is correct because it injects the contents of _form_fields.ejs directly into the template, preserving HTML.

with this done, when create button is clicked that name will be sent to our create author route. But by default express has no easy way to access those variables so will need to install body parser package. This will make it easier to access the different input elements from our server. 

NOTE: body-parser is built into express now so don't do this. 
package install: npm i body-parser

then add to server.js, need to require it. and tell express how to use it. 

app.use(express.urlencoded({ limit: '10mb', extended: false }));
• app.use(...) → This applies middleware to process incoming requests.
• express.urlencoded(...) → Parses URL-encoded form data (i.e., application/x-www-form-urlencoded).
• { limit: '10mb' } → Restricts the request body size to 10MB to prevent large payloads from crashing the server.
• { extended: false } → Determines how to parse URL-encoded data.

Now will go back to the authors route and update the post request to send req.body.name. I also checked first by console logging to see that the data was as expected. 

------

in routes > authors.js POST

in order to create a new author with that req.body.name, we will do somethin similar to what we did in the .get() where we called {author: new Author()}

const author = new Author();


res.render('authors/new', { author: new Author() });
• Renders the new.ejs file inside the views/authors/ directory.
• Passes an empty author object to the EJS file.
  • This ensures that the form fields in new.ejs don't break if they try to reference an author.name value.


when we do this, we are specifying what we want rather than sending all of req.body because if someone sent in an ID to Author, for example, it could reset the ID of our author and that could cause problems. So better to expressly say what we want to take from the client. 

-----

error message

will create a partial to display the error message if there is one. 

created errorMessage.ejs in partials and then added it to the layouts.ejs to render if there is an error.

<!-- <& &> - won't be outputted to client, will only run on server -->
<% if (locals.errorMessage != null ) {%> <%= errorMessage || '' %> <%}%>

notice that we had to wrap even the } inside at the end of a <% %>


-------

async/await

udpating the authors POST route to be async/await

-------

display authors

back in authors.js route we wil work on the '/' all authors route. 

// we will find all authors without condition which is what {} means. If we had conditions, we would add our "where" conditions. {} will get us all the authors
const authors = await Author.find({});
res.render('authors/index', { authors: authors });

after this is done, along with the catch portion of the try/catch, we will turn to the view in authors>index.

-------

hooking up the search form Authors page

back in authors.js route 

adding in searchOptions and then checking to see if a query was made. If so, will be added to the searchOptions that get sent to the request. if not, we will get all authors. 

then adding it in to the res.render() as well so that we can populate the input field with what was searched for. 

-------

___________________________________________________________________________________________

7. Books Index/Create/New Routes 

Focusing now on books, we will start with creating the routes file for this. send some basic info so we know we are on the page

will then make the model for book.js 

after setting up the schema, we will go back to our server.js and hook up the router.

--------

add links into our partials header for the new book pages

--------

creating our _form_fields for books. all the different labels and inputs

--------

so form is now built, need to hook it up to the backend. will go back to book routes to the POST portion

for the image, we aren't adding the cover image name into the book object. We first have to create the cover image file in our file system get the name from that and then save that into our book object. Easiest way to do that is using a library called Multer. Allows us to work with multi-part forms which is what a file form is and also to use file we need to change our form inside of our new page to me of the type - multi-part. 

package added: npm i multer

inside routes > books we will require and set up multer.
we need to tell multer where the upload is going to be so we want the destination to be some form of upload path inside of our project. We want to put this inside of our public folder, inside of another folder there called like book_cover_names but we don't want it hard coded we want it to come from our book model.

so will open book model and create the variable. Once the variable path is created and exported we go back to the books in route folder and need to import it. We need to first take the variable we created in our book model and use that to create the path that we need but to do so we need the path library from node.js. 

file filter -> allows us to filter what files our server accepts.  arguemnts - the file request, the file itself and a callback which is called when we are done 
inside the callback -> first is error parameter so we set it to null since we have no error, second will be a boolean that says true if the file is accepted or false if not accepted. All we want to do is accept image files so wwe want to set up a variable 
const upload = multer({
  dest: uploadPath,
  fileFilter: (req, file, callback) => {

    callback(null, imageMimeTypes.includes(file.mimetype))
  },
});
• dest: uploadPath → Files will be stored in the folder uploadPath.
• fileFilter → Controls which files are accepted.
  • It checks if the uploaded file’s mimetype exists in imageMimeTypes.
  • callback(null, true) → Accepts the file.
  • callback(null, false) → Rejects the file.

-----

setup route to accept files

back to working on router.post for books

router.post('/', upload.single('cover'), async (req, res) => {})

we add in upload.single('cover') -> we take the upload variable we created with multer, tell it we have a single file being uploaded in this form and it has a filename of cover. The variable is whatever you set the name of your input to be. (<input type="file" name="cover" />) So now it tell multer we will be uploading a single file with the name of cover. It will now create that file, upload it onto the server and put it in the correct folder. It will also add a variable into our request called req.file 

-----

with this set up we are now ready to create a book and saving it. Will use a try/catch, will first try to save the book. Will redirect to the books page if saved correctly. it will show the new book based on the id. If there is an error, we want to render the new page and pass it the book variable. The "new" page though has alot of logic inside of it to render. So will remove it to be able to be used in multiple places. renderNewPage()

-----

testing it out... notice that multer created our uploads/bookCovers folder for us. We put in all info and, when clicking create see it goes to the all books page, the cover gets put into bookCovers with a unique hexdecimal name so won't have to worry about cover name overloapping and, it added the book to the book database. 

in checking for error, we see that the book cover gets added to the folder which we don't want. So we need to use fs (filesync) to change the info. 

added in the function removeBookCover()

------

creating the books page where we can view all books

doing similar to what we did for author. However for showing each book we will use the cover. In this case for the src, we need to get the path to the image. 

bookSchema.virtual('coverImagePath').get(function () {
  if (this.coverImageName != null) {
    return path.join('/', coverImageBasePath, this.coverImageName);
  }
});

What is .virtual()?
• .virtual() in Mongoose is used to define virtual properties that do not get stored in the database but behave like normal schema fields.
• These properties are computed dynamically based on existing schema fields.

Breakdown of Your Virtual Property
1. .virtual('coverImagePath') → Defines a virtual property named coverImagePath.
2. .get(function() { ... }) → Specifies the getter function that computes its value dynamically.
3. Inside the function:
  • It checks if coverImageName exists.
  • If it does, it constructs a full file path using path.join(), combining:
    • / (root path)
    • coverImageBasePath (where images are stored, e.g., "uploads/bookCovers").
    • this.coverImageName (the actual filename).

Why Use a Virtual Property?
• The database only stores coverImageName, not the full path.
• The virtual property computes the full path when needed without bloating the database.

------

Now that the books page is created, we need to show the page. Back in routes > books in the all books route we want to render that page.

router.get('/', async (req, res) => {
  try {
    const books = await Book.find({});
    res.render('books/index', {
      books: books,
      searchOptions: req.query,
    });
  } catch {
    res.redirect('/');
  }
});

--------

filtering to search

we aren't doing any actual search in our book.find() wihtin the .get()

we need to check if the name is similar, and we also need to check publish dates. We will make a query object inside that .get() method

------

finally working on rendering the home page. 

___________________________________________________________________________________________

8 File upload setup

Going to use another library to upload our files called FilePond

using the cdn version adding this to layout

<link href="https://unpkg.com/filepond@^4/dist/filepond.css" rel="stylesheet" />
<script defer src="https://unpkg.com/filepond@^4/dist/filepond.js"></script>

loaded in plugins as well for resize, encode and preview

will also create our own file to do the fileupload scripting
<script defer src="javascripts/fileUpload.js"></script>

--------

to use filepond, they have a github page that shows how to use it. for the plugins, the official documentation sows you need ot register them first. 

you have to include class="filepond" in order for the input to get parsed. 

--------

now it is hooked up and we see we can drag files in but it is very wide. We can change this properties built into filepond. In the documentation it is under API > instance > properties. We are looking for aspect ratio. We also want to use the "resize" plugin we added to make sure that the target size is maintained. 

---------

backend of it and the parsing of the file. 

The File encode plugin, encodes a dropped file as a base64 string and stores the string in a hidden input field as a JSON string. It uses a JSON string so it can also add the file size, type, name and metadata.

the "data" is what we are mainly wanting as it is the base64 encoded string of the image file that will go from browser to the user. 

we removed multer and, removed the reference to upload inside of the post request. We also removed the enctype form 
<form action="/books" method="POST" enctype="multipart/form-data"> which was found in the views > books > new.ejs file. 

----

in order to save our files need to modify the books object in the model. Instead of needing to store a coverImageName, we want to store the cover image itself. So we modified the name of coverImageName to just coverImage, then change the type to Buffer as it will be data representing representing the image. Then added in a coverImageType as we need to know the file extension. 

Inside our routes, we will add in a saveCover function and call it from POST. 

We no longer need the removeBookCover function and, its call from the POST. We also no longer need the filename = line and, can remove the coverImageName in the book object that we create. 

----

last part of this section is to remove all code related to uploading and storing. I will be commenting this out so can see it again in the future.

1. delete uploads folder

___________________________________________________________________________________________

9 Authors Show/Edit/Update/Delete

Finishing all the Author routes now. Once getting the structure of these at the bottom of the routes > authors controller, we will install a library so we can make the put and delete requests. 

Method Override - allows us to take a post form send that to our server with a special parameter that tells us if we are doing a put or delete request and then our server will call the correct router based on that parameter. 

npm i method-override 

will import the library into our server.js file and then tell our app to use it. 

-----------

next updating the authors page in views 

for the delete portion of this we need to use a form because the request is to a .delete() not a .get().

as this delete is something we will have to do all over we will break it out.

With this working will go on to build out the view and edit pages

---------

Will work on the edit page.

This page is similar to the new page. Edit is similar to new, 

--------

will then work on update in the routes

Very similar to the create method. 

---------

and now for delete in routes

while simple to set up as it's very similar to the update, we need to think about constraints because if an author is associated with books and, thus books has an author in it's db, we need to be sure that they can't be removed. Otherwise we have a book that doesn't have an author.

Back in our authors model, we will set up the constraint. mongoose has ways for us to run certain code before/after/during certain actions. 

make sure to double check any data that may rely on other info so you don't delete things that may still be in use.

----------

show authors page. get("/:id"). This needs to be done after the get(/new) because otherwise /new will trigger the /:id

adding new view page for the show of author and then have to update th .get('/:id') route in author controller

___________________________________________________________________________________________

10 Finished Backend - Books

starting in routes > books

inside the /:id route, we need to get both the book and author info for the book as well. Right now if we find by ID, it is going to give us the book and will have an ID for the author not any other author related info. So we use .populate('author') which will popuate the author variable inside our book object with all the author info. 

then we need to create the books show view page. 

------

once show is done, need to create the edit page

will go to routes > books, will copy the new book route and change it from there. 

the renderEditPage is basically same as renderNewPage, so broke out the function in order to not repeat code, and passed in an additional variable to tell it what form it is so will go to correct route.

need a PUT route

-------

after PUT we now need a DELETE

---------

final thing to do is on the home page to make the images clickable as well. Same for views > authors > show

___________________________________________________________________________________________

11 General CSS Styles